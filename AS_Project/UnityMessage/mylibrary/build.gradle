apply plugin: 'com.android.library'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.1"

    defaultConfig {
        minSdkVersion 16//需要和Unity3d设置一致
        targetSdkVersion 24//需要和Unity3d设置一致
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    //compile fileTree(dir: 'libs', include: ['*.jar']) 改成->
    //provided fileTree(dir: 'libs', include: ['*.jar']) 不打包进aar
    provided fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:26.+'
    testCompile 'junit:junit:4.12'
}

//导出Manifest
task exportManifest(type: Copy) {
    from('src/main/AndroidManifest.xml')
    into("../output")

    println('===================Export AndroidManifest.xml finished.')
}

//导出aar
task exportAar(type: Copy) {

    from('build/outputs/aar/Unity_plugin-debug.aar')
    into('../output')
    rename { String fileName -> //在复制时重命名文件
        fileName = "Unity_Plugin.aar" // 重命名
    }
    println('===================Export AAR finished.')
}


afterEvaluate {
    exportManifest.execute()
    exportAar.execute()
}
